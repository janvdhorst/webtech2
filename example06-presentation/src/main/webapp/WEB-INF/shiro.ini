[main]
defaultWT2Realm = de.ls5.wt2.conf.auth.WT2Realm
jwtWT2Realm = de.ls5.wt2.conf.auth.jwt.JWTWT2Realm

securityManager.realms = $jwtWT2Realm, $defaultWT2Realm

# uncomment to disable any session storage via cookies
# in this (combined) example, however, it would break the session-based login method
# securityManager.subjectDAO.sessionStorageEvaluator.sessionStorageEnabled = false

# use a custom REST authenticator that returns a 401 instead of redirecting to the login.jsp
restAuthenticator = de.ls5.wt2.conf.auth.BasicAuthenticationFilterWithoutRedirect

# use a custom session-based authenticator that does not redirect after a successful/failed login
loginFilter = de.ls5.wt2.conf.auth.FormAuthenticationFilterWithoutRedirect

# use a custom session-based logout filter that does not redirect after a successful logout
logoutFilter = de.ls5.wt2.conf.auth.LogoutFilterWithoutRedirect

# use a custom filter for constructing AuthenticationTokens for JWT requests
jwtFilter = de.ls5.wt2.conf.auth.jwt.JWTAuthenticationFilter

[urls]

# configuration for stateless authentication on each request
/rest/auth/basic/** = noSessionCreation, restAuthenticator


# configuration for JWT based authentication
/rest/auth/jwt/authenticate = anon
/rest/auth/jwt/** = noSessionCreation, jwtFilter


# configuration for using session based authentication
/login.jsp = loginFilter
/logout = logoutFilter


# do not send challenges for any of the (auth) REST-calls
/rest/auth/** = restAuthenticator


# make other examples not require authentication
/rest/** = anon


# make static Angular resources globally available
/** = anon